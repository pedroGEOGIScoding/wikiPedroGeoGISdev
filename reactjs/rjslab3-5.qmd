---
title: "Lab#RE03-5: data management"
subtitle: ReactJS labs
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description: labs
categories: [reactjs, lab, Lab#RE03]
toc: true
number-sections: true
format:
  html
---

::: {.labs}
ðŸ“˜ **React JS Lab#RE03-5: data management**

In this lab, we will be using:

- the ``react-router-dom``, which is a package with bindings for using React Router in web applications:
  - the [use Context API](https://react.dev/learn/passing-data-deeply-with-context){.external} and ``useContext``  hooks together to build a fully functional CRUD application that emulates a list of employees.
  - `local storage`
  - stores: `redux/reducer`, `Zustand`

:::

</br>


## Overall


::: {.callout-note}
## Modern React
Modern React apps **leverage a variety of strategies to effectively manage state, ensure optimal performance, and enhance scalability.**

Three commonly used tools in this regard are ``context``, ``Redux/reducer``, and ``local storage``.

Context allows for efficient sharing of state across components, Redux/reducer provides a centralized state management solution, and local storage enables persistent storage of data.

Additionally, modern React apps utilize APIs such as REST and WebSockets to facilitate seamless communication with backend servers, further enhancing the app's functionality and real-time capabilities.

:::


::: {.column-margin}
We could add to our App:

- some **performance optimization**: Techniques like [memoization](https://www.topcoder.com/thrive/articles/memoization-in-react-js){.external}, virtualization, and code splitting.
- **Server-side Rendering (SSR) and Static Site Generation (SSG):** SSR and SSG techniques, like ``Next.js`` allow rendering React components on the server-side or generating static HTML files, improving SEO and initial load times.
:::

### Data Management in React: Context, Redux, and Local Storage

Data management in React can be achieved using Context, Redux, and local storage. `Context` simplifies state management, `Redux` offers scalability, and `local storage` provides persistent storage for offline functionality.

|           | Context                     | Redux                      | Local Storage               |
| --------- | --------------------------- | -------------------------- | --------------------------- |
| **Pros**      |                            |                            |                             |
|           | Simplifies state management | Centralized state management | Persistent data storage     |
|           | Lightweight and easy to use| Powerful and scalable       | No server-side dependency    |
|           | No third-party dependencies| Optimized for large apps    | Supports offline functionality|
| **Cons**      |                            |                            |                             |
|           | Limited to one component tree| Steeper learning curve      | Limited storage capacity     |
|           | May lead to prop drilling  | Boilerplate code            | Not suitable for sensitive data|
|           | Performance impact with deeply nested consumers | Adds complexity to smaller apps | Synchronous operations may block UI |



References:

- [React Context API: What is it and How it works?](https://www.loginradius.com/blog/engineering/react-context-api/){.exteranl}
- [Zustand ](https://docs.pmnd.rs/zustand/getting-started/introduction){.external}, [redux/reducer](https://redux.js.org/){.external}
- [useLocalStorage](https://usehooks.com/useLocalStorage/){.external}


## redux/reducer

### What is Redux?

![redux](/images/reactjs/redux-fig.gif){width="60%"}

["Redux"](https://redux.js.org/tutorials/essentials/part-1-overview-concepts){.external} is a pattern and library for managing and updating application state, using events called "actions".

It serves as a **centralized store for state that needs to be used across your entire application,** with rules ensuring that the state can only be updated in a predictable fashion.

### Why Should I Use Redux?

Redux helps you **manage "global" state - state that is needed across many parts of your application.**

The patterns and tools provided by Redux make it easier to understand when, where, why, and how the state in your application is being updated, and how your application logic will behave when those changes occur.

Redux guides you towards writing code that is **predictable** and **testable**, which helps give you confidence that your application will work as expected.

### Example: todo

![[todo](https://redux.js.org/tutorials/fundamentals/part-3-state-actions-reducers#starting-the-todo-example-app){.external} tutorial official docs](/images/reactjs/redux-example-todo.png){width="60%"}

## local storage

We could add local storage to our basic [todo](https://codesandbox.io/s/todo-app-4-6kgxh7?file=/src/todo/TodoApp.jsx:0-6107){.external}

The ``todos`` state is **stored in the local storage using the ``localStorage.setItem`` method.**

It is initialized with the stored ``todos`` from the local storage in the first ``useEffect`` hook. Whenever the ``todos`` state is updated, the second ``useEffect`` hook is triggered, and the updated todos are stored in the local storage using ``localStorage.setItem.``

```{.js .code-overflow-wrap filename="Todos.jsx"}
// ...

const Todos = () => {
  const [todos, setTodos] = useState([]);

  useEffect(() => {
    const storedTodos = localStorage.getItem(LOCAL_STORAGE_KEY);
    if (storedTodos) {
      setTodos(JSON.parse(storedTodos));
    }
  }, []);

  useEffect(() => {
    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));
  }, [todos]);

  const fetchTodos = async () => {
    // Fetching todos from API (unchanged code)
    // ...
  };

  const addTodo = (newTodo) => {
    // Adding todo to the state and localStorage
    setTodos([...todos, newTodo]);
  };

  const updateTodo = async (id) => {
    // Updating todo in the state and localStorage
    const updatedTodos = todos.map((todo) => {
      if (todo.id === id) {
        return { ...todo, completed: !todo.completed };
      }
      return todo;
    });

    setTodos(updatedTodos);
  };

  const deleteTodo = async (id) => {
    // Deleting todo from the state and localStorage
    const filteredTodos = todos.filter((todo) => todo.id !== id);
    setTodos(filteredTodos);
  };

  // ...

  return (
    <ApiContext.Provider 
      value={{ todos, addTodo, updateTodo, deleteTodo }}>
      {/* ... */}
    </ApiContext.Provider>
  );
};

export default Todos;
```

## redux/reducer or context

- [Pitfalls of overusing React Context](https://blog.logrocket.com/pitfalls-of-overusing-react-context/){.external}
- [Comparing React Context and Redux](https://betterprogramming.pub/context-limitations-when-emulating-redux-in-a-small-to-medium-size-application-acd05ef882e4){.external}

