---
title: "ReactJS: custom hooks"
subtitle: ReactJS hooks
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description: description
categories: [reactjs, hooks, custom]
toc: true
number-sections: true
format:
  html
---

::: {.summary}

ðŸ“˜ **Custom Hooks**

Hooks are reusable functions. When you have component logic that needs to be used by multiple components, **we can extract that logic to a custom Hook.**

Custom Hooks start with ``use``. 

Example: ``useFetch``

:::

---

## Example 1

We are ``fetching`` data, We will use the [JSONPlaceholder](https://jsonplaceholder.typicode.com/){.external} service to **fetch fake data**. This service is great for testing applications when there is no existing data.


``` {.jsx .code-overflow-wrap filename="App.js"}
import { useState, useEffect } from "react";

const Home = () => {
  const [data, setData] = useState(null);

  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/todos")
      .then((res) => res.json())
      .then((data) => setData(data));
 }, []);

  return (
    <>
      {data &&
        data.map((item) => {
          return <p key={item.id}>{item.title}</p>;
        })}
    </>
  );
};
```

::: {.column-margin}
![``useEffect`` inital render: fetching data](/images/reactjs/ex30.png){width=100%}
:::

The ``fetch`` logic may be needed in other components as well, so **we will extract that into a custom Hook.**

> Move the fetch logic to a new file to be used as a custom Hook:

``` {.jsx .code-overflow-wrap filename="useFetch.js"}
import { useState, useEffect } from "react";

const useFetch = (url) => {
  const [data, setData] = useState(null);

  useEffect(() => {
    fetch(url)
      .then((res) => res.json())
      .then((data) => setData(data));
  }, [url]);

  return [data];
};

export default useFetch;
```

``` {.jsx .code-overflow-wrap filename="index.js"}
import ReactDOM from "react-dom/client";
import useFetch from "./useFetch";

const Home = () => {
  const [data] = useFetch("https://jsonplaceholder.typicode.com/todos");

  return (
    <>
      {data &&
        data.map((item) => {
          return <p key={item.id}>{item.title}</p>;
        })}
    </>
  );
};
```
We have created a new file called ``useFetch.js`` containing a function called ``useFetch`` which contains a**ll of the logic needed to fetch our data.**

