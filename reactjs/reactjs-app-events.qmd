---
title: "React JS App: events"
subtitle: ReactJS events
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description: description
categories: [reactjs, events]
toc: true
number-sections: true
format:
  html
---

## Overview

::: {.summary}

ðŸ“˜ **events**
React lets you add event handlers to your JSX.

[Event handlers](https://beta.reactjs.org/learn/responding-to-events){.external} are your own functions that will be triggered in response to interactions **like clicking, hovering, focusing form inputs,** and so on.

:::

---

## Adding event handlers

You can make it show a message when a user clicks by following these three steps:

1. Declare a function called ``handleClick`` inside your ``Button`` component.
2. Implement the logic inside that function (use ``alert`` to show the message).
3. Add ``onClick={handleClick}`` to the ``<button> JSX``.

Event handler functions are usually defined inside your components

``` {.jsx .code-overflow-wrap filename="app.jsx"}
export default function Button() {
  function handleClick() {
    alert('You clicked me!');
  }

  return (
    <button onClick={handleClick}>
      Click me
    </button>
  );
}

```

::: {.column-margin}
![By convention, it is common to name event handlers as ``handle`` followed by the event name. Youâ€™ll often see ``onClick={handleClick}``, ``onMouseEnter={handleMouseEnter}``, and so on.](/images/reactjs/ex13.png){width=100%}
:::
::: {.column-margin}
![Alert](/images/reactjs/ex14.png){width=100%}
:::

You defined the ``handleClick`` function and then passed it as a ``prop`` to ``<button>``.  ``handleClick`` is an **event handler**

::: {.callout-important}

Functions passed to event handlers must be passed, not called. For example:

- **passing** a function (correct): ``<button onClick={handleClick}>``	
- **calling** a function (incorrect): ``<button onClick={handleClick()}>``

The difference is subtle. In the first example, the ``handleClick`` function is passed as an ``onClick`` event handler. This tells React to remember it and only call your function when the user clicks the button.

In the second example, the ``()`` at the end of ``handleClick()`` **fires the function immediately during rendering**, without **any clicks**. This is because ``JavaScript`` inside the ``JSX { and }`` executes right away.
:::


## Passing event handlers as props

Often youâ€™ll want the **parent component to specify a childâ€™s event handler.** Consider buttons: depending on where youâ€™re using a ``Button`` component, you might want to execute a different functionâ€”perhaps **one plays a movie and another uploads an image.**

To do this, pass a prop the component receives from its parent as the ``event handler`` like so:

``` {.jsx .code-overflow-wrap filename="index.js"}
function Button({ onClick, children }) {
  return (
    <button onClick={onClick}>
      {children}
    </button>
  );
}

function PlayButton({ movieName }) {
  function handlePlayClick() {
    alert(`Playing ${movieName}!`);
  }

  return (
    <Button onClick={handlePlayClick}>
      Play "{movieName}"
    </Button>
  );
}

function UploadButton() {
  return (
    <Button onClick={() => alert('Uploading!')}>
      Upload Image
    </Button>
  );
}

export default function Toolbar() {
  return (
    <div>
      <PlayButton movieName="Kiki's Delivery Service" />
      <UploadButton />
    </div>
  );
}
```

::: {.column-margin}
![Executing index.js:](/images/reactjs/ex15.png){width=100%}
:::

::: {.column-margin}
![First, ``Toolbar`` component renders ``PlayButton`` and `UploadButton` components. Second, both of them call their functions and then, each one call ``Button`` to render the button](/images/reactjs/handler.png){width=100%}
:::


Here, the ``Toolbar`` component renders a ``PlayButton`` and an ``UploadButton``:

- ``PlayButton`` passes ``handlePlayClick`` as the ``onClick`` prop to the ``Button`` inside.
- ``UploadButton`` passes`` () => alert('Uploading!')`` as the ``onClick`` prop to the ``Button`` inside.

Finally, your ``Button`` component accepts a prop called ``onClick``. It passes that prop directly to the built-in browser ``<button>`` with ``onClick={onClick}``. This tells React to call the passed function on click.



