---
title: "React JS: props and state"
subtitle: Passing Props to a Component
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description: description
categories: [reactjs, props]
toc: true
number-sections: true
format:
  html
---


::: {.summary}

üìò **Props**

**React components** use **props** (``props`` stands for **properties**) to communicate with each other.

Every parent component **can pass some information to its child components by giving them props**.

Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, and functions.

:::

</br>

![Props are properties passed to a child component that can hold many data types (e.g. array, object, number, function, others).](/images/reactjs/react_props.png){width="70%"}

In ``React JS``, data flows in one direction, **from Parent to Child**. This helps components to be **simple and predictable**.

::: {.column-margin}
> ‚ÄúSimplicity is the ultimate sophistication.‚Äù -Leonardo da Vinci
:::

## Overview

In React.js, "``props``" (**short for "properties"**) are used **to pass data from one component to another**. Props are passed as an object (which is similar to a JSON object) and contain key-value pairs of data: 

- ``JSON`` is a lightweight data interchange format that is easy to read and write for both humans and machines.
-  ``props`` is a reserved keyword that refers to an object containing all the properties (or props) passed to a component.

For example, let's say we have a component called **MyComponent** that receives an object named ``person`` as a ``prop``. This ``person`` ``object`` might look like this:

```js
const person = {
  name: 'John',
  age: 30,
  address: {
    street: '123 Main St',
    city: 'Anytown',
    state: 'CA',
    zip: '12345'
  }
};
```
In this case, the ``person`` ``object`` contains some key-value pairs and another object. We can then pass this ``person`` ``object`` as a prop to our **MyComponent** component like this:

```js
<MyComponent person={person} />

```

Inside **MyComponent**, we can access the ``person`` ``prop`` using the props object like this:

```js
function MyComponent(props) {
  console.log(props.person.name); // 'John'
  console.log(props.person.age); // 30
  console.log(props.person.address.street); // '123 Main St'
  // ...
}

```
### Example1

```js
const car = {
  make: 'Toyota',
  model: 'Corolla',
  year: 2022,
  color: 'blue'
};

const person = {
  name: 'John',
  age: 30,
  address: {
    street: '123 Main St',
    city: 'Anytown',
    state: 'CA',
    zip: '12345'
  }
};

<MyComponent person={person} car={car} />

function MyComponent(props) {
  console.log(props.person.name); // 'John'
  console.log(props.person.age); // 30
  console.log(props.person.address.street); // '123 Main St'

  console.log(props.car.make); // 'Toyota'
  console.log(props.car.model); // 'Corolla'
  console.log(props.car.year); // 2022
  console.log(props.car.color); // 'blue'
  // ...
}

```

### Example2


Use the same syntax as HTML attributes to send props into a component:

```{.js .code-overflow-wrap filename="profile.jsx"}
function Avatar({ person, size }) {
  // person and size are available here
}
```

```{.js .code-overflow-wrap filename="lin.jsx"}
export default function Lin() {
  return (
    <Avatar
      person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }}
      size={100}
    />
  );
}
```

```{.js .code-overflow-wrap filename="carla.jsx"}
export default function Carla() {
  return (
    <Avatar
      person={{ name: 'Carla Lan', imageId: 'KIU3QH1' }}
      size={60}
    />
  );
}
```

## Pure Components

### Stateful/Stateless Components 

> Sateful Components: Functions that internally modify the underlying data (props).

```{.jsx .code-overflow-wrap filename="profile.jsx"}
function Hello({ name }) {
  //...
  return (
    <>
     <h1>Hello {name + ' - ' + (new Date()).toLocaleString()}!!!</h1>;
    </>
  )
}

export default function Hello() {
  //...
  return (
   <Hello name="World" />
  )
}
```

> Stateless Components: ``Pure components`` that respond to the underlying data received (``props``), without modifying it.

A ``pure function`` is a function where the return value is only determined by its input values, without observable side effects.

```{.jsx .code-overflow-wrap filename="Hello.jsx"}
function Hello({ name }) {
  //...
  return (
    <>
     <h1>Hello {name}!!!</h1>;
    </>
  )
}

export default function Hello() {
  //...
  return (
   <Hello name="World" />
  )
}
```

### Keep Components Pure

::: {.callout-important}
Writing pure functions takes a bit of practice, but it unlocks the power of React‚Äôs paradigm
:::


By strictly only [writing](https://react.dev/learn/keeping-components-pure){.external} your components as ``pure functions``, **you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows**. To get these benefits, though, there are a few rules you must follow.

- Rendering can happen at any time, so components **should not depend on** each others‚Äô rendering sequence.
- You **should not mutate any of the inputs that your components use for rendering**. That includes props, state, and context. To update the screen, ‚Äúset‚Äù state instead of mutating preexisting objects.
- Strive **to express your component‚Äôs logic in the JSX you return**. When you need to ‚Äúchange things‚Äù, you‚Äôll usually want to do it in an event handler. As a last resort, you can useEffect.



**React‚Äôs rendering process must always be pure.** Components should only return their JSX, and not change any objects or variables that existed before rendering‚Äîthat would make them impure!

Here is a component **that breaks this rule**:




```{.jsx .code-overflow-wrap filename="Hello.jsx"}
let guest = 0;

function Cup() {
  // Bad: changing a preexisting variable!
  guest = guest + 1;
  return <h2>Tea cup for guest #{guest}</h2>;
}

export default function TeaSet() {
  return (
    <>
      <Cup />
      <Cup />
      <Cup />
    </>
  );
}
```
::: {.column-margin}
![render](/images/reactjs/ex60.png){width=100%}
:::

[Detecting impure calculations with StrictMode](https://react.dev/learn/keeping-components-pure#detecting-impure-calculations-with-strict-mode){.external}

::: {.callout-note}
## Rendering must always be a pure calculation
- Same inputs, same output.
- It minds its own business.
  
Otherwise, you can encounter **confusing bugs and unpredictable behavior as your codebase grows in complexity**.

When developing in `Strict Mode`, **React calls each component‚Äôs function twice**, which can help surface mistakes caused by impure functions.
:::



## What is state and rendering: update/render cycle

![React render cycle: trigger-render-paint by @_georgemoller](/images/reactjs/react-cycle.PNG){width="80%"}

[State variables](https://beta.reactjs.org/learn/state-as-a-snapshot#setting-state-triggers-renders){.external} might look like regular JavaScript variables that you can read and write to.

> **However, state behaves more like a snapshot**.

Setting it **does not change** the state variable you already have, [but instead triggers a re-render](https://beta.reactjs.org/learn/render-and-commit#step-1-trigger-a-render){.external} that will print a state variable copy with the new value.

::: {.callout-important}
State can hold any kind of JavaScript value, including objects.

But you shouldn‚Äôt change objects that you hold in the React state directly.

Instead, when you want to update an object, you need to create a new one (or make a copy of an existing one), and then set the state to use that copy.
:::

[How it works in combination with spread opearator](/reactjs/reactjs-es6-spread.qmd#copying-objects-with-the-spread-syntax)  
[And what is a hook: useState](/reactjs/reactjs-hook-state.qmd)

> **Treat state as read-only**: in other words, you should treat any JavaScript object that you put into state as read-only.

``` {.jsx .code-overflow-wrap filename="App.js"}
import { useState } from 'react';

export default function Counter() {
  const [number, setNumber] = useState(0);

  return (
    <>
      <button onClick={() => {
        setNumber(number++);
      }}>+1</button>

      <h1>{number}</h1>
    </>
  )
}

```

::: {.column-margin}
![Initial render](/images/reactjs/ex53.png){width=100%}
:::

::: {.column-margin}
![Next render: setting-update/render cycle](/images/reactjs/ex54.png){width=100%}
:::

::: {.column-margin}
![Next render](/images/reactjs/ex55.png){width=100%}
:::

### update/render behaviour

Any screen update in a React app happens **in three steps:**

1. Trigger
2. Render
3. Paint-Commit

::: {.column-margin}
You can use `Strict Mode` to find mistakes in your components
React does not touch the DOM if the rendering result is the same as last time
:::

[After](https://react.dev/learn/render-and-commit#step-3-react-commits-changes-to-the-dom){.external} rendering (calling) your components, React will modify the `DOM`.

> **React only changes the DOM nodes if there‚Äôs a difference between renders**.

For example, here is a component that re-renders with different props passed from its parent every second. Notice how you can add some text into the `<input>`, updating its value, but **the text doesn‚Äôt disappear** when the component re-renders:

```js
export default function Clock({ time }) {
  return (
    <>
      <h1>{time}</h1>
      <input />
    </>
  );
}
```

::: {.column-margin}
![render](/images/reactjs/ex61.png){width=100%}
:::





## So, Is React immutable?

The term **immutable** refers **to the idea that the state of a component should not be changed directly.** Instead, when the state of a component needs to be updated, a new copy of the state should be created with the desired changes applied.

This approach to state management can help <mark>to ensure that the state of a React application is predictable and easy to understand, as it makes it clear how the state is changing over time.</mark>

It can also make it easier to debug issues in your application, as you can more easily trace the history of the state and see how it has changed.

### And then, what is a mutation?

You can store any kind of JavaScript value in state.

```{.jsx .code-overflow-wrap filename="Hello.jsx"}
const [x, setX] = useState(0);
```

So far you‚Äôve been working with numbers, strings, and booleans. These kinds of JavaScript values are *immutable*, meaning unchangeable or *read-only*. **You can trigger a re-render to replace a value:**

```{.jsx .code-overflow-wrap filename="Hello.jsx"}
setX(5);
```

The ``x`` *state changed from 0 to 5*, but the number ``0`` itself did not change. It‚Äôs not possible to make **any changes to the built-in primitive values** like numbers, strings, and booleans in JavaScript.

Now consider an object in state:

```{.jsx .code-overflow-wrap filename="Hello.jsx"}
const [position, setPosition] = useState({ x: 0, y: 0 });
```

Technically, it is possible to change the contents of the object itself. This is called a **mutation**:

```{.jsx .code-overflow-wrap filename="Hello.jsx"}
position.x = 5;
```

<mark>However, although objects in React state are technically mutable, you should treat them as if they were immutable‚Äîlike numbers, booleans, and strings. Instead of mutating them, you should always **replace** them.<mark>

## Examples

### Example 1: setting state only changes it for the next render

[In this example](https://beta.reactjs.org/learn/queueing-a-series-of-state-updates#react-batches-state-updates){.external}, you might expect that clicking the ``+3`` button would increment the counter three times because it calls ``setNumber(number + 1)`` three times.

``` {.jsx .code-overflow-wrap filename="App.js"}
import { useState } from 'react';

export default function Counter() {
  const [number, setNumber] = useState(0);

  return (
    <>
      <h1>{number}</h1>
      <button onClick={() => {
        setNumber(number + 1);
        setNumber(number + 1);
        setNumber(number + 1);
      }}>+3</button>
    </>
  )
}
```

::: {.column-margin}
![Initial render](/images/reactjs/ex36.png){width=100%}
:::

::: {.column-margin}
![Next render](/images/reactjs/ex37.png){width=100%}
:::

::: {.column-margin}
![3 Next render](/images/reactjs/ex38.png){width=100%}
:::

::: {.callout-important}
## Number is a state variable, not a regular variable
**Setting state only changes it for the next render**. During the first render, ``number`` was ``0``. 

And this is like this because number is ... **a state.**

So, during execution lines #10, #11 and #12, **``number`` value is ...0!**
:::


[This is why](https://beta.reactjs.org/learn/queueing-a-series-of-state-updates#react-batches-state-updates){.external}, in that render‚Äôs ``onClick handler``, the value of ``number`` is still ``0`` even after ``setNumber(number + 1)`` was called .. **three times!!!**


### Example 2: State over time 

[State over time](https://beta.reactjs.org/learn/state-as-a-snapshot#state-over-time){.external}, step by step how setting and render do not happen at same moment.


``` {.jsx .code-overflow-wrap filename="App.js"}
import { useState } from 'react';

export default function Counter() {
  const [number, setNumber] = useState(0);

  return (
    <>
      <h1>{number}</h1>
      <button onClick={() => {
        setNumber(number + 5);
        alert(number);
      }}>+5</button>
    </>
  )
}

```

::: {.column-margin}
![Initial render, ``number`` state is 0](/images/reactjs/ex39.png){width=100%}
:::

::: {.column-margin}
![setting ``number`` state to 5, but first React will execute line #11, alert, and ``number`` state **still** is 0](/images/reactjs/ex40.png){width=100%}
:::

::: {.column-margin}
![Next render, ``number`` state now is now 5](/images/reactjs/ex41.png){width=100%}
:::

> Alert is helping us to understand why **setting and render are two different moments**

Setting ``number`` state to 5, but first React will execute line #11, alert, and ``number`` state **still** is 0


### Example 3: email

Here is an example of **how that makes your event handlers less prone to timing mistakes**. Below is a form that sends a message with a **five-second delay**. Imagine this scenario:

1. You press the ``Send`` button, sending *Hello* to **Alice**.
2. Before the **five-second delay ends**, you change the value of the ``To`` field to **Bob**.

``` {.jsx .code-overflow-wrap filename="App.js"}
import { useState } from 'react';

export default function Form() {
  const [to, setTo] = useState('Alice');
  const [message, setMessage] = useState('Hello');

  function handleSubmit(e) {
    e.preventDefault();
    setTimeout(() => {
      alert(`You said ${message} to ${to}`);
    }, 5000);
  }

  return (
    <form onSubmit={handleSubmit}>
      <label>
        To:{' '}
        <select
          value={to}
          onChange={e => setTo(e.target.value)}>
          <option value="Alice">Alice</option>
          <option value="Bob">Bob</option>
        </select>
      </label>
      <textarea
        placeholder="Message"
        value={message}
        onChange={e => setMessage(e.target.value)}
      />
      <button type="submit">Send</button>
    </form>
  );
}
```

::: {.column-margin}
![Initial render](/images/reactjs/ex47.png){width=100%}
:::

::: {.column-margin}
![Next render](/images/reactjs/ex48.png){width=100%}
:::

React keeps the state values *fixed* within **one render‚Äôs event handlers**.

You don‚Äôt need to worry whether the state has changed while the code is running.

### Example 4: state updater function

It is an uncommon use case, but if you would like to update the same state variable multiple times before the next render, instead of passing the next state value like ``setNumber(number + 1)``, you can pass a function that calculates the next state based on the previous one in the queue, like ``setNumber(n => n + 1)``.

It is a way to tell React to **do something with the state value instead of just replacing it.**

``` {.jsx .code-overflow-wrap filename="App.js"}
import { useState } from 'react';

export default function Counter() {
  const [number, setNumber] = useState(0);

  return (
    <>
      <h1>{number}</h1>
      <button onClick={() => {
        setNumber(n => n + 1);
        setNumber(n => n + 1);
        setNumber(n => n + 1);
      }}>+3</button>
    </>
  )
}
```

::: {.column-margin}
![Initial render](/images/reactjs/ex49.png){width=100%}
:::

::: {.column-margin}
![Next render](/images/reactjs/ex50.png){width=100%}
:::





