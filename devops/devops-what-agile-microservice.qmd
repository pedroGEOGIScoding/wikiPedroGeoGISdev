---
title: "DevOps: Agile and Microservices"
subtitle: DevOps within the organization
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description: reliable development, better integration between devs and ops, and faster release of new or revised software features or products to customers.
categories: [devops, agile, microservices]
toc: true
number-sections: true
highlight-style: pygments
format:
  html
---

## Overview

![](/images/devops/devops-goals.png){fig-align="center" width="20%"}

[DevOps](https://www.google.com/url?q=https%3A%2F%2Fwww.netapp.com%2Fdevops-solutions%2Fwhat-is-devops%2F&sa=D&sntz=1&usg=AOvVaw3G__m0gJLhaCgoKvCYTbux) is an [**evolving philosophy and framework**](https://www.google.com/url?q=https%3A%2F%2Fwww.atlassian.com%2Fdevops&sa=D&sntz=1&usg=AOvVaw3AVef3N71q4QAb_v13g0PC) that [encourages](https://www.google.com/url?q=https%3A%2F%2Fwww.techtarget.com%2Fsearchitoperations%2Fdefinition%2FDevOps&sa=D&sntz=1&usg=AOvVaw3VTTQ4YheMwNJk8slP7ZGw):

- **reliable** development
- better **integration** between devs and ops, and
- **faster release of new or revised software** *features* or *products* to customers.

![](/images/devops/devops-practices.png){fig-align="center" width="20%"}

The [practice](https://www.google.com/url?q=https%3A%2F%2Fabout.gitlab.com%2Ftopics%2Fdevops%2F&sa=D&sntz=1&usg=AOvVaw19B5iCj-oIIfWUxWtP-3HK) of [DevOps](https://www.google.com/url?q=https%3A%2F%2Fwww.synopsys.com%2Fglossary%2Fwhat-is-devops.html&sa=D&sntz=1&usg=AOvVaw3W1uJdZGQEe4oKXqXTOO8A) **encourages:**

- smoother, continuous communication and collaboration,
- visibility and iteration,
- and <mark>transparency between application development teams (Dev) and their IT operations team (Ops)</mark> counterparts.

> This closer relationship between "Dev" and "Ops" permeates every phase of the [DevOps lifecycle](https://www.cuelogic.com/blog/what-is-devops): from initial software planning to code, build, test, and release phases and on to deployment, operations, and ongoing monitoring. 

Some [people](https://www.redhat.com/en/topics/devops/devops-engineer) group DevOps goals into four categories: culture, automation, measurement, and sharing (`CAMS`), and `DevOps` tools can aid in these areas. These tools can make development and operations workflows more streamlined and collaborative, automating previously time-consuming, manual, or static tasks involved in integration, development, testing, deployment, or monitoring.

## Agile DevOps

![](/images/devops/devops-agile.png){fig-align="center" width="60%"}

[Agile DevOps](https://agilefirst.io/agile-devops/) is a methodology that combines agile software development with devops practices to help organizations deliver features and updates faster and more efficiently. 

The main goal of <mark>`Agile DevOps` is to shorten the feedback loop between developers and operations teams so that changes can be made quickly and efficiently.</mark>

Microservices [describe](https://learn.microsoft.com/en-us/devops/deliver/what-are-microservices) the architectural process of building a distributed application from separately deployable services that perform specific business functions and communicate over web interfaces. 

`DevOps` teams enclose individual pieces of functionality in microservices and build larger systems by combining the microservices like building blocks.

## Microservices

![](/images/devops/devops-microservices.png){fig-align="center" width="70%"}

Microservices apply an example of the open/closed principle:

- They're open for extension (using the interfaces they expose)
- They're closed for modification (each is implemented and versioned independently)
Microservices provide many benefits over monolithic architectures:
- They can remove single points of failure (SPOFs) by ensuring issues in one service don't crash or affect other parts of an application.
- Individual microservices can be scaled out independently to provide extra availability and capacity.
- DevOps teams can extend functionality by adding new microservices without unnecessarily affecting other parts of the application.

Using [microservices](https://www.projectpro.io/article/aws-architecture-with-diagram/575) can increase team velocity. DevOps practices, such as Continuous Integration and Continuous Delivery, are used to drive microservice deployments.

`Microservices` nicely complement **cloud-based application architectures** by allowing software development teams to take advantage of scenarios such as event-driven programming and autoscale. The microservice components expose `APIs` (application programming interfaces), typically over REST protocols, for communicating with other services.


::: {.callout-note}
# Containers

An increasingly common practice is to use container clusters to implement `microservices`. Containers allow for the isolation, packaging, and deployment of `microservices`, while orchestration scales out a group of containers into an application.
:::
