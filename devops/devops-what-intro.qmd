---
title: "DevOps: Introduction"
subtitle: DevOps what it is
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description: DevOps is a cross-disciplinary community of practice dedicated to the study of building, evolving and operating rapidly-changing resilient systems at scale.
categories: [devops, introduction]
toc: true
number-sections: true
highlight-style: pygments
format:
  html
---



::: {.summary}
üìò **DevOps**

**DevOps is a cross-disciplinary community of practice dedicated to the study of building, evolving and operating rapidly-changing resilient systems at scale.**
:::

# What DevOps Isn't

![](/images/devops/devops-what-is-not.png){fig-align="center" width="70%"}

Given that DevOps is a philosophy... a management approach... and the combination of multiple IT disciplines... it might be easier to quickly look at some of what it isn't.

- **DevOps is not Agile.** That said, your teams might indeed use Agile as a development methodology within an overall DevOps-style approach. Agile is certainly DevOps-compatible, and, like DevOps, values short, continual improvement.

- **DevOps is not Continuous Integration.** That said, CI is often a part of DevOps-style behavior. The two can be really closely related, in fact - so closely that it's hard to tell the difference. I suppose you could argue that it's difficult to practice the DevOps philosophy without using CI as an enabling implementation, but you can definitely have CI without behaving like a DevOps organization, so the two aren't exactly the same thing.

- **DevOps isn't "the developers running Operations.**" If anything, it's Operations automating things to the point where Operations runs itself in response to authorized actions taken by other roles, including developers.

- **DevOps isn't a software development methodology**. See the first bullet, above. DevOps is what happens while software development is happening, and largely what happens when software development (or a cycle of it), is done. You still need to manage your software development - you just need to use a methodology that's DevOps-compatible.

- **DevOps is not automation**. However, you can't have DevOps without automation. Automation is perhaps the biggest thing that Operations brings to the DevOps table, in fact.

> Further, it actually seems to be an unstated goal of many DevOps champions to avoid the creation of any kind of trademarked, rigid, rulebook of "how to do DevOps," as ITIL or TQM or something. This book certainly doesn't attempt to provide "rules;" the goal here is to provide some understanding of what DevOps' broad goals are.

[DevOps by DevOps Training](https://tkssharma-devops.gitbook.io/devops-training/#what-devops-isnt/)

# What Is DevOps?

`DevOps` is a new term emerging from the collision of two major related trends.

- The first was also called ‚Äúagile infrastructure‚Äù or ‚Äúagile operations‚Äù; it sprang from applying Agile and Lean approaches to operations work.
- The second is a much expanded understanding of the value of collaboration between development and operations staff throughout all stages of the development lifecycle when creating and operating a service, and how important operations has become in our increasingly service-oriented world (cf. Operations: The New Secret Sauce).

> One definition *Jez Humble* proposed to me is that `DevOps` is ‚Äúa cross-disciplinary community of practice dedicated to the study of building, evolving and operating rapidly-changing resilient systems at scale.‚Äù

[What Is DevOps by the agile admin](https://theagileadmin.com/what-is-devops/)

::: {.callout-note}
# What is DevOps?

`DevOps` is a software development methodology that accelerates the delivery of higher-quality applications and services by combining and automating the work of software development and IT operations teams.
:::

[What is DevOps?](https://www.ibm.com/topics/devops){.external target='_blank'}

## DevOps lifecycle



The <mark>DevOps lifecycle (sometimes called the continuous delivery pipeline, when portrayed in a linear fashion) is a series of iterative, automated development processes, or workflows, run within a larger, automated and iterative development lifecycle</mark>, designed to optimize the rapid delivery of high-quality software.

Workflow names and the number of workflows differ depending on whom you ask, but they often include these eight steps.

![How DevOps works: The DevOps lifecycle](/images/devops/devops-lifecicle.jpeg)

# DevOps vs Site Reliability Engineering (SRE)

In the world of software development and IT operations, `DevOps` and `Site Reliability Engineering (SRE)` have emerged as **critical methodologies for delivering high-quality**, reliable software solutions.

While often used interchangeably, these approaches **have distinct characteristics and goals** that help organizations streamline their software delivery and maintenance processes.

<mark>DevOps and SRE are not competing methodologies but complementary approaches that can be integrated to create a robust, efficient software delivery and maintenance strategy.<mark>


While `DevOps` focuses on breaking down silos between development and operations, fostering collaboration and continuous delivery, `SRE` applies software engineering principles to operational challenges, ensuring system reliability and performance.

## Comparison Table

The integration of these approaches allows organizations to balance rapid innovation with system stability:

- `DevOps` drives the acceleration of software development and deployment, creating flexible and responsive delivery pipelines.
- `SRE` complements this by implementing rigorous monitoring, establishing service level objectives, and creating systematic approaches to managing system reliability.


::: {.column-page-right}
| Aspect | DevOps | SRE |
|--------|--------|-----|
| **Primary Focus** | Continuous integration and delivery | System reliability and performance |
| **Key Objective** | Reduce barriers between development and operations | Maintain system reliability through engineering practices |
| **Main Metrics** | Deployment frequency, lead time, change failure rate | Service Level Indicators (SLIs), Error Budgets |
| **Team Composition** | Cross-functional teams | Specialized reliability engineers |
| **Automation Level** | High automation of delivery pipeline | Automation of operational tasks and monitoring |
| **Change Management** | Frequent, incremental changes | Controlled, measured changes |
| **Cultural Approach** | Collaborative, shared responsibility | Data-driven, systematic |
: Comparison table DevOps vs SRE {tbl-colwidths="[20, 40, 40]"}
:::

</BR>

Where `DevOps` emphasizes cultural transformation and collaborative workflows, `SRE` provides a more quantitative framework for understanding system performance. By combining their strengths, teams can create automated, efficient processes that not only deliver software quickly but also maintain high standards of reliability and performance.

> The synergy between `DevOps` and `SRE` enables organizations to respond more effectively to technological challenges, reduce operational complexity, and create more resilient software systems. Rather than competing, these methodologies work together to address the complex demands of modern software development and infrastructure management.



::: {.callout-note}
# Core Principles & When to Use Each Approach

Core Principles

- **DevOps** emphasizes:
  - Continuous integration
  - Rapid deployment
  - Collaboration
  - Automation of build and release processes

- **SRE** focuses on:
  - Reliability engineering
  - Performance optimization
  - Proactive monitoring
  - Error budget management

When to Use Each Approach

- **Choose DevOps when**:
  - Needing to break down silos
  - Wanting to accelerate software delivery
  - Seeking to improve collaboration

- **Choose SRE when**:
  - Requiring high system reliability
  - Managing complex, large-scale systems
  - Needing systematic approach to operational challenges


:::



