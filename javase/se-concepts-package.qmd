---
title: "Java SE: Packages"
subtitle: Java Fundamentals
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description: What is a Package in Java
categories: [javase, package, concepts]
toc: true
number-sections: true
format:
  html
---

## Overview

::: {.summary}
ðŸ“˜ **Design-patterns**

In Java, a package is a **collection of related classes and interfaces that provide a higher-level abstraction for organizing and modularizing your code**.

Packages allow you to group similar classes and interfaces together, and to provide a convenient namespace for accessing those classes and interfaces from other parts of your program.
:::

---

When you create a new class or interface in Java, you can place it in a package by using the `package` keyword at the top of the file, followed by the name of the package.


``` {.java .code-overflow-wrap filename="Example.java"}
package com.example;

public class Example {
    // Class code goes here...
}

```
::: {.column-margin}
For example, the following code shows how to create a new class called `Example` and place it in the `com.example` package

:::

By placing the `Example` class in the `com.example` package, you can access the class from other parts of your program by using the fully-qualified class name, which includes the package name as well as the class name.

For example, the following code shows how to use the `Example` class from within another class called `Main`:

``` {.java .code-overflow-wrap filename="Main.java"}
public class Main {
    public static void main(String[] args) {
        // Use fully-qualified class name to access Example class
        com.example.Example example = new com.example.Example();
    }
}

```
::: {.column-margin}
In this example, the `Main` class uses the `com.example.Example` class by specifying the fully-qualified class name, which includes the package name as well as the class name. This allows the `Main` class to access the `Example` class from within the `com.example` package.
:::

## Package in Java SE or Java EE is not similiar

::: {.callout-important}
The package that a class is placed in can be an important factor in **how the framework resolves requests**. This is because the <mark>Spring Framework uses the package structure of a project to help determine the path of a request, and to map the request to the appropriate controller or handler</mark>.
:::

For example, consider a Spring MVC application that contains a `com.example.web` package, which contains a `HomeController` class that is used to handle requests to the application's home page. In this case, the `HomeController` class is placed in the `com.example.web` package, which means that the path of a request to the home page would include the package name as part of the URL.

For instance, if the application's base URL is `http://localhost:8080`, then a request to the home page might have a URL like the following:

``` bash
http://localhost:8080/com.example.web/home

```

In this case, the `com.example.web` package is part of the path that resolves the request to the `HomeController` class, which is responsible for handling the request and generating a response.

## Conclusion

Overall, packages are an important concept in Java, and can help to improve the modularity, organization, and maintainability of your code. By grouping related classes and interfaces together into packages, you can provide a convenient namespace for accessing those classes and interfaces, and you can better manage the dependencies between different parts of your program.


