{
  "hash": "a951225d1a5582397840b9ed893fa645",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Lab#SB08-2: Vaadin\"\nsubtitle: Spring Boot Restaurant Management Vaadin\nauthor: albertprofe\ndate: \"01/010/2024\"\ndate-modified: last-modified\ndate-format: full\ndescription:  Spring Boot\ncategories: [Spring-Boot, lab]\ntoc: true\nnumber-sections: true\nformat:\n  html:\n    code-overflow: wrap\ncode-annotations: hover\n---\n\n\n:::: {.labs}\nðŸ“˜ Spring Boot Lab#SB00-2: RestaurantManager Vaadin\nWe are going to evolve the current Java SE Restaurant project into a `Spring Boot Restaurant Management System` with an `H2 DB` and web interface using `Vaadin`.\n:::\n</br>\n\n- [Commits RestaurantVaadin](https://github.com/AlbertProfe/restaurantVaadin){.external target='_blank'}\n\n# Create a new Spring Boot project & H2 DB\n\nFrom RestaurantProject to RestaurantManagement, reference code where to start:\n\n- [Restaurant Java SE Lab](/javase/selab4-1.qmd)\n- [Restaurant Java SE Code](https://github.com/AlbertProfe/restaurant){.external target='_blank'}\n- [Restaurant Java SE Wiki](https://github.com/AlbertProfe/restaurant/wiki){.external target='_blank'}\n- [Spring Boot H2 and TH](/springboot/boot-what-create-th-h2.qmd){.external target='_blank'}\n\n![](/images/springboot/labsb08/lab08-1-vaadin-view-restaurantVaadin2.png)\n\n\n- **Create a new Spring Boot project**: The first step would be to create a new Spring Boot project in the preferred IDE or text editor.\n\n> The project can be created using **Spring Initializr**, which will create the necessary **file structure and dependencies**.\n\n- **Configure the H2 database**: In the newly created project, configure the H2 database by adding:\n  - the H2 dependency in the `pom.xml` file,\n  - and also create a new `application.properties` file\n  - set the database properties such as:\n    - the database **URL**,\n    - **username**,\n    - and **password**.\n\n\n## Model & Entities\n\n\n![](/images/springboot/labsb08/lab08-2-model-entity.png){fig-align=\"center\" width=\"60%\"}\n\n- **Create a Menu Entity**: To represent a menu item in the restaurant management system, create a Menu `@Entity`\n\n> It could include attributes such as name, price, description, category (appetizer, main course, dessert, etc.), and availability status.\n\n- **Create a Customer Entity**: To represent a customer in the system, create a Customer entity that includes attributes such as customer ID, name, phone number, email, and **reservation history.**\n\n- **Create Booking Entity**: To represent a booking in the system, create a Booking entity that includes attributes such as booking date, time, number of people, tables, and associated customer.\n\n- **Create Staff Entity**: To represent staff members in the system, create a Staff entity that includes attributes such as staff ID, name, position, shift schedules, and assigned tables.\n\n![](/images/springboot/labsb08/lab08-2-model-design.png){fig-align=\"center\" width=\"60%\"}\n\n\nDomains: `@Controller`, `@Service` and `@Repository`\n\n- **Create Repositories**: To access the data stored in the database, create repositories for each entity. **The repositories will provide the methods to create, read, update, and delete the data.**\n\n- **Create Services**: Create services that **will implement the business logic of the system by calling the repository methods.** \n\n> The **services** will provide the methods to search for available tables, make a reservation, update menu items, process orders, manage staff schedules, handle customer feedback, and generate reports on restaurant performance.\n\n- **Create Controllers**: Create controllers that **will handle the requests from the Vaadin UI by calling the service methods.** \n\n> The **controllers** will provide the methods to create a customer account, search for available tables, make a reservation, view and update menu items, place an order, manage staff schedules, submit customer feedback, and generate various reports.\n\n# Vaadin\n\nModern Java framework for building web applications\n\n> `Vaadin` is a web application framework for Java that allows developers to build modern, interactive web applications using Java without having to write `HTML`, `CSS`, or `JavaScript`.\n\nHere are some key points about `Vaadin`:\n\n- [Vaadin Official Website](https://vaadin.com/){.external target='_blank'}\n- [Vaadin Documentation](https://vaadin.com/docs/latest/){.external target='_blank'}\n- [Vaadin Spring Boot Integration](https://vaadin.com/docs/latest/flow/integrations/spring/){.external target='_blank'}\n- [Vaadin Flow](https://vaadin.com/docs/latest/flow){.external target='_blank'}\n- [GitHub Tutorial Vaadin 24](https://github.com/vaadin/tutorial/){.external target='_blank'}\n- [Vaadin Maven CLI create a project](https://vaadin.com/docs/latest/getting-started/project/maven-archetype){.external target='_blank'}\n\n\n\n`Vaadin` Flow lets a <mark>server-side Java application build a user interface from components in Java. These Java components are connected to web components running in the browser</mark>. Flow manages the relaying of user [interaction back to the server-side application](https://vaadin.com/docs/latest/flow/application){.external target='_blank'}, which can handle it with event listeners.\n\n> Application views and their components are typically used to display and accept input of application data. This data is often stored in a backend service, such as a database. Application logic is often created using application frameworks, such as Spring.\n\n\n![](https://vaadin.com/docs/latest/_astro/application-architecture.BkkGoEuL_1Qhbrj.webp){fig-align=\"center\" width=\"70%\"}\n\n\n::: {.callout-note}\n# `Vaadin` offers two main flavors for web application development:\n\n1. **Hilla**: A full-stack framework combining a Spring Boot backend with a React or Lit frontend. It provides type-safe communication between client and server, auto-generated TypeScript interfaces, and built-in security features.\n\n\n2. **Flow**: A server-side Java framework for building web applications. It allows developers to create UIs using a component-based approach, with automatic server-client communication and state management.\n\n\nBoth flavors leverage Vaadin's extensive set of UI components and themes. `Hilla` is ideal for developers comfortable with modern `JavaScript` frameworks, while `Flow` suits those preferring a Java-centric approach.\n\nBoth can be used to create responsive, feature-rich web applications with excellent performance and maintainability.\n\n\n[Hilla](https://vaadin.com/docs/latest/hilla){.external target='_blank'} / [Flow](https://vaadin.com/docs/latest/flow){.external target='_blank'}\n\n:::\n\n\n## `atmosphere`\n\n**Vaadin** uses the [Atmosphere framework](https://github.com/Atmosphere/atmosphere) to facilitate robust <mark>client-server communication, particularly for real-time and push-based features. </mark>\n\n`Atmosphere` is an open-source project that provides a powerful abstraction layer for various **asynchronous communication protocols**, including `WebSockets`, `Server-Sent Events`, and `long-polling`.\n\n`Vaadin` integrates `Atmosphere` to handle its server **push** functionality, allowing servers to send updates to clients without the need for **client-side polling**. This integration enables `Vaadin` applications to create responsive, **real-time user interfaces** with minimal developer effort.\n\n![](/images/springboot/labsb08/lab08-2-atmosphere.png){fig-align=\"center\" width=\"60%\"}\n\n\n`Atmosphere`'s key features utilized by Vaadin include:\n\n1. **Protocol negotiation** and fallback mechanisms\n2. **Automatic selection** of the best available transport method\n3. **Handling of connection management** and reconnection scenarios\n4. **Cross-browser compatibility**\n\n> By building on Atmosphere, Vaadin abstracts away the complexities of low-level communication protocols, allowing developers to focus on application logic while still benefiting from efficient, real-time communication between client and server.\n\n## Binding\n\n- [Data Binding](https://vaadin.com/docs/latest/flow/binding-data){.external target='_blank'}\n- [Loading & Saving Business Objects](https://vaadin.com/docs/latest/flow/binding-data/components-binder-load){.external target='_blank'}\n- [Binding Data to Forms](https://vaadin.com/docs/latest/flow/binding-data/components-binder){.external target='_blank'}\n\n\nIn `Vaadin`, the <mark>**Binder** is a data binding class used to **connect UI components to Java beans**. It is not a container but rather a **utility** that facilitates the transfer and validation of data between the user interface and backend objects.</mark>\n\n**Binder** reads values from business objects, converts them to the format required by UI fields, and vice versa, supporting validation to ensure <mark>data integrity</mark>. This makes it essential for creating dynamic and interactive forms in Vaadin applications.\n\n::: {.callout-note}\n# There can be only one Binder\n\nThere can be only one **Binder** instance for each form.\n\nYou should use this instance for all the fields in the form.\n:::\n\n**Client To Server: How to Bind Form Data**\n\nThe following steps include everything needed to load, edit, and save values for a form. `Java 8 method references` are used.\n\n\n\n\n```{java, code-line-numbers=\"1-5\"}\n\n// Create a Binder instance for the Person class\nBinder<Person> binder = new Binder<>(Person.class); // <1>\n\n// Create a TextField for the title\nTextField titleField = new TextField(); // <2>\n\n// Bind the titleField to the Person class\nbinder.forField(titleField)\n       .bind(\n                // Callback that loads the title from a person instance\n                Person::getTitle, // <3>\n                // Callback that saves the title in a person instance\n                Person::setTitle); // <3>\n\n// Create a TextField for the name\nTextField nameField = new TextField(); // <4>\n\n// Shorthand for cases without extra configuration\nbinder.bind(nameField, Person::getName, // <5>\n        Person::setName); // <5>\n\n```\n\n\n\n1. Create a Binder instance for the Person class.\n2. Create a TextField for the title.\n3. Bind the titleField to the Person class using method references.\n4. Create a TextField for the name.\n5. Bind the nameField to the Person class using method references.\n\n\n\n\n**Server to Client: Reading & Writing Automatically**\n\nWriting automatically to business objects when the user makes changes in the UI is usually the most convenient option. You can bind the values directly to an instance by allowing Binder to save automatically values from the fields.\n\nIn the example here, field values are saved automatically:\n\n\n``` java\nBinder<Person> binder = new Binder<>();\n\n// Field binding configuration omitted.\n// It should be done here.\n\nPerson person = new Person(\"John Doe\", 1957);\n\n// Loads the values from the person instance.\n// Sets person to be updated when any bound field\n// is updated.\nbinder.setBean(person);\n\nButton saveButton = new Button(\"Save\", event -> {\n    if (binder.validate().isOk()) {\n        // Person is always up-to-date as long as\n        // there are no validation errors.\n\n        MyBackend.updatePersonInDatabase(person);\n    }\n});\n\n```\n\n\n## Create Vaadin Views\n\nTo create the web interface of the system, create `Vaadin` views for each of the main functionalities. **The views will be used to display the data and handle user interactions.**\n\n> `Vaadin` allows you to create rich, interactive UIs using `Java` code. It provides a wide range of UI components and layouts that you can use to build your application's interface.\n\nExample of a simple `Vaadin` view:\n\n::: {.column-page-right}\n```java\n@Route(\"menu\")\npublic class MenuView extends VerticalLayout {\n    private final MenuService menuService;\n\n    public MenuView(MenuService menuService) {\n        this.menuService = menuService;\n        \n        H1 title = new H1(\"Restaurant Menu\");\n        Grid<Menu> grid = new Grid<>(Menu.class);\n        grid.setItems(menuService.getAllMenuItems());\n        \n        add(title, grid);\n    }\n}\n```\n:::\n\nThis view creates a page with a title and a grid showing all menu items.\n\nKey Vaadin Concepts:\n\n1. **Server-side Architecture**: Vaadin primarily runs on the server, which means your business logic stays secure and you can leverage the full power of Java.\n\n2. **Component-based UI**: Build UIs by combining and customizing existing components or creating your own.\n\n3. **Data Binding**: Easily bind UI components to data sources, including JPA entities.\n\n4. **Themes and Styling**: Customize the look and feel of your application using CSS and Vaadin's theming capabilities.\n\n5. **Integration with Spring Boot**: Vaadin integrates seamlessly with Spring Boot, allowing you to use Spring's dependency injection and other features.\n\n\n# Code: `CustomerView`\n\n\nThe `CustomerView` class is a Vaadin-based web application view for managing customer information in a restaurant.\n\n![](/images/springboot/labsb08/lab08-2-ui.png){fig-align=\"center\" width=\"80%\"}\n\n\n\nKey Components:\n\n- **Route**: Default view of the application (`@Route(\"\")`).\n- **Layout**: Extends `VerticalLayout` for vertical arrangement.\n- **Grid**: Displays customer data in a table format.\n- **Form Fields**: Text fields for name, email, and phone number.\n- **Buttons**: Save and Delete buttons for managing customers.\n- **Binder**: For data binding between form fields and the `Customer` object.\n\nMain Features:\n\n1. **Layout Structure**\n   - 3-column layout for responsive design.\n   - Center column contains interactive components.\n\n2. **Customer Data Display**\n   - Grid shows customer details (ID, name, email, phone number).\n   - Allows selection of customers from the grid.\n\n3. **Form for Customer Management**\n   - Input fields for customer information.\n   - Save button to add/update customers.\n   - Delete button to remove selected customers.\n\n4. **Data Binding**\n   - Uses Binder for two-way data binding.\n   - Updates form fields when a customer is selected.\n\n5. **Event Handling**\n   - Save button saves/updates customer data.\n   - Delete button removes the selected customer.\n   - Grid selection updates form with selected customer's data.\n\n6. **Repository Integration**\n   - Uses `CustomerRepository` for CRUD operations.\n\n`CustomerView` public class methods:\n\n\n![](/images/springboot/labsb08/lab08-2-vaadin-class-methods.png){fig-align=\"center\" width=\"50%\"}\n\n\nKey Methods:\n\n- `createMainLayout()`: Sets up UI components and layout.\n- `setupEventListeners()`: Configures event handlers.\n- `saveCustomer()`: Saves/updates customer records.\n- `deleteCustomer()`: Deletes selected customer records.\n- `clearForm()`: Resets form fields.\n- `refreshGrid()`: Updates grid with latest customer data.\n\nThis view provides an easy-to-use interface for managing `customer` information in a restaurant domain.\n\n\n- [src/main/java/dev/example/restaurant/view/CustomerView.java](https://github.com/AlbertProfe/restaurantVaadin/blob/master/src/main/java/dev/example/restaurant/view/CustomerView.java){.external target='_blank'}\n\n\n::: {.column-page-right}\n\n<details>\n<summary>Code `CustomerView.java`</summary>\n\n```{.java .code-overflow-wrap filename=\"CustomerView.java\"}\npackage dev.example.restaurant.view;\n\nimport com.vaadin.flow.component.Component;\nimport com.vaadin.flow.component.button.Button;\nimport com.vaadin.flow.component.grid.Grid;\nimport com.vaadin.flow.component.html.H2;\nimport com.vaadin.flow.component.orderedlayout.HorizontalLayout;\nimport com.vaadin.flow.component.orderedlayout.VerticalLayout;\nimport com.vaadin.flow.component.textfield.TextField;\nimport com.vaadin.flow.data.binder.Binder;\nimport com.vaadin.flow.router.Route;\nimport dev.example.restaurant.model.Customer;\nimport dev.example.restaurant.repository.CustomerRepository;\nimport java.util.UUID;\n\n@Route(\"\")\npublic class CustomerView extends VerticalLayout {\n\n    private final CustomerRepository customerRepository;\n    private final Grid<Customer> grid = new Grid<>(Customer.class);\n    private final TextField name = new TextField(\"Name\");\n    private final TextField email = new TextField(\"Email\");\n    private final TextField phoneNumber = new TextField(\"Phone Number\");\n    private final Button save = new Button(\"Save\");\n    private final Button delete = new Button(\"Delete\");\n    private final Binder<Customer> binder = new Binder<>(Customer.class);\n\n    public CustomerView(CustomerRepository customerRepository) {\n        this.customerRepository = customerRepository;\n\n        // Set up the main view properties\n        setSizeFull();\n        setPadding(false);\n        setSpacing(false);\n\n        // Create and add the main layout\n        add(createMainLayout());\n\n        // Set up data binding\n        binder.bindInstanceFields(this);\n\n        // Set up event listeners\n        setupEventListeners();\n\n        // Initialize the view\n        clearForm();\n        refreshGrid();\n    }\n\n    // Method to create the main layout\n    private Component createMainLayout() {\n        // Create the 3-column layout\n        HorizontalLayout mainLayout = new HorizontalLayout();\n        mainLayout.setSizeFull();\n        mainLayout.setPadding(false);\n        mainLayout.setSpacing(false);\n\n        // Left column (empty for spacing)\n        VerticalLayout leftColumn = new VerticalLayout();\n        leftColumn.setWidth(\"20%\");\n\n        // Center column (contains all the components)\n        VerticalLayout centerColumn = new VerticalLayout();\n        centerColumn.setWidth(\"60%\");\n        centerColumn.setAlignItems(Alignment.CENTER);\n\n        // Right column (empty for spacing)\n        VerticalLayout rightColumn = new VerticalLayout();\n        rightColumn.setWidth(\"20%\");\n\n        // Set up the grid\n        grid.setColumns(\"id\", \"name\", \"email\", \"phoneNumber\");\n        grid.setSizeFull();\n\n        // Create a form layout\n        HorizontalLayout formLayout = \n            new HorizontalLayout(name, email, phoneNumber);\n        formLayout.setWidth(\"100%\");\n        formLayout.setJustifyContentMode(JustifyContentMode.CENTER);\n\n        // Create a button layout\n        HorizontalLayout buttonLayout = \n            new HorizontalLayout(save, delete);\n        buttonLayout.setJustifyContentMode(JustifyContentMode.CENTER);\n\n        // Add components to the center column\n        centerColumn.add(\n                new H2(\"Customer Management\"),\n                grid,\n                formLayout,\n                buttonLayout\n        );\n\n        // Add all columns to the main layout\n        mainLayout.add(leftColumn, centerColumn, rightColumn);\n\n        return mainLayout;\n    }\n\n    // Method to set up event listeners\n    private void setupEventListeners() {\n        save.addClickListener(e -> saveCustomer());\n        delete.addClickListener(e -> deleteCustomer());\n\n        grid.asSingleSelect().addValueChangeListener(event -> {\n            if (event.getValue() != null) {\n                binder.setBean(event.getValue());\n            } else {\n                clearForm();\n            }\n        });\n    }\n\n    // Methods to save, delete, and clear the form\n    private void saveCustomer() {\n        Customer customer = binder.getBean();\n        if (customer == null) {\n            customer = new Customer();\n        }\n        if (customer.getId() == null || customer.getId().isEmpty()) {\n            customer.setId(UUID.randomUUID().toString());\n        }\n        binder.writeBeanIfValid(customer);\n        customerRepository.save(customer);\n        clearForm();\n        refreshGrid();\n    }\n\n    // Method to delete a customer\n    private void deleteCustomer() {\n        Customer customer = binder.getBean();\n        if (customer != null) {\n            customerRepository.delete(customer);\n            clearForm();\n            refreshGrid();\n        }\n    }\n\n    // Method to clear the form\n    private void clearForm() {\n        binder.setBean(new Customer());\n    }\n\n    // Method to refresh the grid\n    private void refreshGrid() {\n        grid.setItems(customerRepository.findAll());\n    }\n}\n\n```\n</details>\n\n:::\n\n# Security\n\n**Necessary Dependencies**\n\nThe chat application is a Spring Boot application. Therefore, use Spring Security to secure it. Start by adding this dependency to your pom.xml file:\n\n``` xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n```\n\n![](/images/springboot/labsb08/lab08-2-security-steps.png){fig-align=\"center\" width=\"80%\"}\n\nKey points about <mark>securing a `Vaadin Flow` application with `Spring Security`</mark>:\n\n\n1. Add the **Spring Boot Security starter** `dependency`.\n2. Create a `login view` using Vaadin's `LoginForm` component.\n3. Define user roles (e.g. USER and ADMIN).\n4. Configure `Spring Security` by extending `VaadinWebSecurity`. Set up the login view and define users/roles.\n5. Grant access to views using annotations like `@PermitAll` or `@RolesAllowed`.\n6. Secure the application layer (services) with `@RolesAllowed` annotations.\n7. Add a `logout` button to the main layout.\n8. Hide UI elements (button `LogOut`) based on user roles using `AuthenticationContext`.\n9. Use the authenticated `authenticationContext.getPrincipalName()` as the value `LogOut` button.\n\n> This setup restricts access to authenticated users, allows only admins to create channels, and personalizes the user experience. It integrates Vaadin's built-in security features with Spring Security for a comprehensive security solution.\n\n\n\n# Test\n\n**Test the system**\n\nTest the system by running it and making sure that all the functionalities work as expected. This includes testing reservation creation, menu management, order processing, staff scheduling, and report generation.\n\n# Code and output\n\n- [GitHub code](https://github.com/AlbertProfe/restaurantVaadin){.external target='_blank'}\n- [GitHub commits](https://github.com/AlbertProfe/restaurantVaadin/commits/master/){.external target='_blank'}\n\n## Commit `6a3c9f1`\n\nCommits on Oct 2, 2024:\n\n- create project customer entity\n- adding layout\n- decoupling layout\n- minor changes\n\n![](/images/springboot/labsb08/lab08-2-vaadin-view.png)\n\n\n\n## Commit `3333400`\n\n\nCommit on Nov 12, 2024: **add UI components: data picker, dialog, combo, accordion**\n\n- [Code](https://github.com/AlbertProfe/restaurantVaadin/tree/33334005faf1e28d6ae953d6dff56f68990abd83){.external target='_blank'}\n- [Code: /view/CustomerView.java](https://github.com/AlbertProfe/restaurantVaadin/blob/33334005faf1e28d6ae953d6dff56f68990abd83/src/main/java/dev/example/restaurant/view/CustomerView.java){.external target='_blank'}\n\n**H2 LOCAL server**\n\n![](/images/springboot/labsb08/lab08-2-vaadin-h2.png)\n\n\n**View**\n\nThe new view `Vaadin` code defines a `CustomerView` class facilitates <mark>CRUD operations on customer data</mark> through a user interface that includes form fields for customer details (`name`, `email`, `phonenumber`), buttons for saving and deleting records, and a `grid` for displaying customer information.\n\nThe layout is structured into **three columns**, with a progress bar and additional components like a `ComboBox` for customer types and a `DatePicker` for selecting start dates.\n\nEvent listeners handle user interactions, ensuring data is saved or deleted as needed while maintaining synchronization with the underlying database via the `CustomerRepository`.\n\n\n\n![](/images/springboot/labsb08/lab08-2-vaadin-components.png)\n\n\n## Commit `33b1284`\n\nCommits on Nov 12, 2024: **MainLayout, BookingView, RouterLink and drawer**\n\n- [Code](https://github.com/AlbertProfe/restaurantVaadin/tree/33b12844f8d20c52d08de41c8e3eb3c5f58751a9){.external target='_blank'}\n\nThis setup accomplishes the following:\n\n- The `CustomerView` and `BookingView` classes are annotated with @Route, specifying their respective URL paths (\"customer\" and \"booking\") and setting `MainLayout` as their parent layout14.\n- The `MainLayout` class extends `AppLayout`, which provides a header and a responsive drawers.\n- In the `MainLayout`, we create a `header` with a logo and a drawer `toggle button`.\n- The `drawer` is populated with `RouterLink` components for both the `Customer` and `Booking` views, allowing for navigation between them.\n- The `setHighlightCondition` method is used to highlight the current active link in the drawer.\n\n\n![](/images/springboot/labsb08/lab08-2-vaadin-mainlayout.png)\n\nWith this setup, users can navigate to `/customer` to see the `Customer` view and `/booking` to see the `Booking` view. The main layout provides a consistent structure across both views, with a header and a navigation drawer that can be toggled on smaller screens\n\n![](/images/springboot/labsb08/lab08-2-vaadin-mainlayout-2.png)\n\n![](/images/springboot/labsb08/lab08-2-vaadin-mainlayout-3.png)\n\n## Commit `b67d768`\n\n\nCommits on Nov 13, 2024: **Login, LoginView and Configuration**\n\n- [Security Vaadin v24.4](https://vaadin.com/docs/latest/getting-started/tutorial/flow/security){.external target='_blank'}\n\n`/home` is public:\n\n![](/images/springboot/labsb08/lab08-2-login-home-public.png)\n\nAny other view/page needs `auth`:\n\n![](/images/springboot/labsb08/lab08-2-login-public.png)\n\nBob may navigate with (`USER_ROLE`):\n\n![](/images/springboot/labsb08/lab08-2-login-customer.png)\n\nOnce, `Bob` is logged (`USER_ROLE`), there are some view/page (`/booking`) with `ADMIN_ROLE`\n\n![](/images/springboot/labsb08/lab08-2-login-nopermit.png)\n\n`ADMIN_ROLE` & `/booking`:\n\n![](/images/springboot/labsb08/lab08-2-login-admin.png)\n\n\n# Commit `c0c2192`\n\nCommits on Nov 14, 2024: **Icon, Drawer with Login button and fake user isaac-1234**\n\nWe create a new user: `isaac` and encrypt the password with [bcrypt](https://bcrypt.online/){.external target='_blank'}:\n\n\n::: {.column-page-right}\n\n``` java\n@Bean\n    public UserDetailsService users() {\n        var alice = User.builder()\n                .username(\"alice\")\n                // password = password with this hash, don't tell anybody :-)\n                .password(\"{bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW\")\n                .roles(Roles.USER)\n                .build();\n        var bob = User.builder()\n                .username(\"bob\")\n                // password = password with this hash, don't tell anybody :-)\n                .password(\"{bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW\")\n                .roles(Roles.USER)\n                .build();\n        var isaac = User.builder()\n                .username(\"isaac\")\n                // password = password with this hash, don't tell anybody :-)\n                .password(\"{bcrypt}$2y$10$jaoj0Q2GRSxqwXaVB4yzSugTJJM8zuQf0NmLZU.iPhoC2CJBA.hsi\")\n                .roles(Roles.ADMIN, Roles.USER)\n                .build();\n\n        var admin = User.builder()\n                .username(\"admin\")\n                // password = password with this hash, don't tell anybody :-)\n                .password(\"{bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW\")\n                .roles(Roles.ADMIN, Roles.USER)\n                .build();\n        return new InMemoryUserDetailsManager(alice, bob, admin, isaac);\n    }\n\n```\n:::\n\n`Drawer` with icons and login view in `MainLayout`:\n\n![](/images/springboot/labsb08/lab08-2-login-icon-view.png)\n\n`LogOut` button hidden\n\n![](/images/springboot/labsb08/lab08-2-login-icon-drawer.png)\n\nNew User **isaac-1234**\n\n![](/images/springboot/labsb08/lab08-2-login-icon-isaac.png)\n\n**isaac** logged in:\n\n![](/images/springboot/labsb08/lab08-2-login-icon-isaac-2.png)\n\n",
    "supporting": [
      "sblab8-2_files"
    ],
    "filters": [],
    "includes": {}
  }
}